<?php
/**
 * HiPay Fullservice SDK Magento 1
 *
 * 2018 HiPay
 *
 * NOTICE OF LICENSE
 *
 * @author    HiPay <support.tpp@hipay.com>
 * @copyright 2018 HiPay
 * @license   https://github.com/hipay/hipay-fullservice-sdk-magento1/blob/master/LICENSE.md
 */
?>
<?php if (Mage::getStoreConfig('hipay/hipay_api/fingerprint', Mage::app()->getStore())) : ?>
    <input type="hidden" id="ioBB" name="payment[device_fingerprint]" value=""/>
<?php endif; ?>

<?php
/* @var $this Allopass_Hipay_Block_Checkout_Tokenjs */

if ($this->hasPublicCredentials()):

    ?>
    <script type="text/javascript">

        Review.prototype.save = Review.prototype.save.wrap(function (parentMethod) {

            var paymentData = Form.serialize(payment.form, {hash: true});
            var method = paymentData["payment[method]"];

            if (method.search('hipay_cc') > -1 || method.search('hipay_hostedfields') > -1) {

                Form.Element.setValue(method + "_cc_number", "");
                Form.Element.setValue(method + "_cc_cid", null);
            }

            parentMethod();
        });

        //Override save method to generate js token
        Payment.prototype.save = function () {

            var self = this;

            if (checkout.loadWaiting != false) return;
            var validator = new Validation(this.form);
            if (this.validate() && validator.validate()) {

                checkout.setLoadWaiting('payment');

                let realFingerprint = $('realFingerprint');
                if(realFingerprint){
                    $$('.ioBB_fingerprint').forEach(function (element) {
                        element.value = realFingerprint.value;
                    });

                }
                var paymentData = Form.serialize(this.form, {hash: true});
                var method = paymentData["payment[method]"];
                self.safeFormData = paymentData;
                //Process Tokenization if method use API Mode (CC form)
                if (method.search('hipay_cc') > -1 && paymentData["payment[" + method + "_cc_number]"]) {
                    tokenizeDirectPost(paymentData, method, Form);
                } else if (method.search('hipay_hostedfields') > -1 && hipayHF && paymentData["payment[" + method + "_oneclick]"] !== "use_oneclick") {
                    hipayHF.setMultiUse(isOneClick(paymentData, method));
                    tokenizeHostedFields(method, Form);
                } else {
                    savePayment(this);
                }

            }

            function tokenizeHostedFields(method, Form) {
                hipayHF.getPaymentData()
                    .then(function (response) {

                            self.safeFormData["payment[" + method + "_cc_number]"] = response.pan;
                            self.safeFormData["payment[" + method + "_cc_owner]"] = response.card_holder;
                            self.safeFormData["payment[" + method + "_cc_type]"] = response.payment_product;
                            self.safeFormData["payment[" + method + "_cc_exp_year]"] = response.card_expiry_year;
                            self.safeFormData["payment[" + method + "_cc_exp_month]"] = response.card_expiry_month;
                            self.safeFormData["payment[" + method + "_cc_cid]"] = null;
                            Form.Element.setValue(method + "_cc_type", response.payment_product);
                            Form.Element.setValue(method + "_cc_owner", response.card_holder);
                            replaceForm(Form, response, method);

                            savePayment(self);
                        },
                        function (errors) {
                            for (var error in errors) {
                                var domElement = document.querySelector(
                                    "[data-hipay-id='hipay-card-field-error-" + errors[error].field + "']"
                                );

                                // If DOM element add error inside
                                if (domElement) {
                                    domElement.innerText = errors[error].error;
                                }
                            }
                            checkout.setLoadWaiting(false);
                        }
                    );
            }


            function tokenizeDirectPost(paymentData, method, Form) {
                var expiryMonth = (paymentData["payment[" + method + "_cc_exp_month]"].length === 1) ?
                    "0" + paymentData["payment[" + method + "_cc_exp_month]"]
                    : paymentData["payment[" + method + "_cc_exp_month]"];

                var params = {
                    cardNumber: paymentData["payment[" + method + "_cc_number]"],
                    cvc: paymentData["payment[" + method + "_cc_cid]"],
                    expiryMonth: expiryMonth,
                    expiryYear: paymentData["payment[" + method + "_cc_exp_year]"].slice(-2),
                    cardHolder: paymentData["payment[" + method + "_cc_owner]"] ? paymentData["payment[" + method + "_cc_owner]"] : '',
                    multiUse: isOneClick(paymentData, method)
                };

                var config = <?php echo $this->getConfigJson() ?>;
                var tokenizeEnv = 'production';

                if (config.methods[method].is_test_mode == 1) {
                    tokenizeEnv = 'stage'; // default is production/live
                    config.api_tokenjs_username = config.api_tokenjs_username_test;
                    config.api_tokenjs_publickey = config.api_tokenjs_publickey_test;
                }

                var hipay = HiPay({
                    username: config.api_tokenjs_username,
                    password: config.api_tokenjs_publickey,
                    environment: tokenizeEnv,
                    lang: 'en'
                });

                hipay.tokenize(params).then(function (result) {

                        // The card has successfully been tokenized
                        var token = result.token;

                        self.safeFormData["payment[" + method + "_cc_number]"] = result.pan;
                        self.safeFormData["payment[" + method + "_cc_cid]"] = null;

                        replaceForm(Form, result, method);
                        savePayment(self);

                    }, function (errors) {
                        checkout.setLoadWaiting(false);
                        alert(Translator.translate("An error has occured, please check the information entered.").stripTags());
                    }
                );
            }

            function replaceForm(Form, result, method) {

                Form.Element.setValue(method + "_expiration_yr", result.card_expiry_year);
                Form.Element.setValue(method + "_expiration", result.card_expiry_month);
                Form.Element.setValue(method + "_cc_cid", null);
                Form.Element.setValue(method + "_browser_info", JSON.stringify(result.browser_info));

                //Write token value in input of type hidden
                $("payment_form_" + method).insert({
                    bottom: new Element('input', {
                        type: 'hidden',
                        name: 'payment[' + method + '_cc_token]',
                        value: result.token
                    })
                });
            }

            function savePayment(paymentObj) {
                var request = new Ajax.Request(
                    paymentObj.saveUrl,
                    {
                        method: 'post',
                        onComplete: paymentObj.onComplete,
                        onSuccess: paymentObj.onSave,
                        onFailure: checkout.ajaxFailure.bind(checkout),
                        parameters: paymentObj.safeFormData
                    }
                );
            }

            function isOneClick(paymentData, method) {
                return method === "hipay_ccxtimes"
                    || typeof paymentData["payment[" + method + "_oneclick]"] !== 'undefined';
            }
        }
    </script>
<?php endif; ?>
